//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\alexd\Desktop\Slicer\DynAbs\src\DynAbs.Summaries\Summaries.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DynAbs.Summaries
{
	using Antlr4.Runtime.Misc;
	using Antlr4.Runtime.Tree;
	using IToken = Antlr4.Runtime.IToken;
	using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

	/// <summary>
	/// This class provides an empty implementation of <see cref="ISummariesVisitor{Result}"/>,
	/// which can be extended to create a visitor which only needs to handle a subset
	/// of the available methods.
	/// </summary>
	/// <typeparam name="Result">The return type of the visit operation.</typeparam>
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
	[System.CLSCompliant(false)]
	public partial class SummariesBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, ISummariesVisitor<Result>
	{
		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.s"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitS([NotNull] SummariesParser.SContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.rv"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitRv([NotNull] SummariesParser.RvContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.ro"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitRo([NotNull] SummariesParser.RoContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.r"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitR([NotNull] SummariesParser.RContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.w"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitW([NotNull] SummariesParser.WContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.cn"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitCn([NotNull] SummariesParser.CnContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.null"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitNull([NotNull] SummariesParser.NullContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.fresh"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitFresh([NotNull] SummariesParser.FreshContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.isIn"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitIsIn([NotNull] SummariesParser.IsInContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.singleMany"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitSingleMany([NotNull] SummariesParser.SingleManyContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.single"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitSingle([NotNull] SummariesParser.SingleContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.many"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitMany([NotNull] SummariesParser.ManyContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.types"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitTypes([NotNull] SummariesParser.TypesContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.type"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitType([NotNull] SummariesParser.TypeContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.kinds"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitKinds([NotNull] SummariesParser.KindsContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.kind"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitKind([NotNull] SummariesParser.KindContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.words"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitWords([NotNull] SummariesParser.WordsContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.elementType"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitElementType([NotNull] SummariesParser.ElementTypeContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.parametricType"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitParametricType([NotNull] SummariesParser.ParametricTypeContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.field"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitField([NotNull] SummariesParser.FieldContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.anyField"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitAnyField([NotNull] SummariesParser.AnyFieldContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.mc"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitMc([NotNull] SummariesParser.McContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.c"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitC([NotNull] SummariesParser.CContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.metf"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitMetf([NotNull] SummariesParser.MetfContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.etf"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitEtf([NotNull] SummariesParser.EtfContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.fa"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitFa([NotNull] SummariesParser.FaContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.met"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitMet([NotNull] SummariesParser.MetContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.et"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitEt([NotNull] SummariesParser.EtContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.bf"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitBf([NotNull] SummariesParser.BfContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.b"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitB([NotNull] SummariesParser.BContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.f"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitF([NotNull] SummariesParser.FContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.filter"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitFilter([NotNull] SummariesParser.FilterContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.filterT"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitFilterT([NotNull] SummariesParser.FilterTContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.filterUT"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitFilterUT([NotNull] SummariesParser.FilterUTContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.filterOT"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitFilterOT([NotNull] SummariesParser.FilterOTContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.filterOK"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitFilterOK([NotNull] SummariesParser.FilterOKContext context) { return VisitChildren(context); }

		/// <summary>
		/// Visit a parse tree produced by <see cref="SummariesParser.number"/>.
		/// <para>
		/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
		/// on <paramref name="context"/>.
		/// </para>
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		public virtual Result VisitNumber([NotNull] SummariesParser.NumberContext context) { return VisitChildren(context); }
	}
} // namespace DynAbs.Summaries
