//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\alexd\Desktop\Slicer\DynAbs\src\DynAbs.Summaries\Summaries.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DynAbs.Summaries
{
	using Antlr4.Runtime;
	using Antlr4.Runtime.Atn;
	using Antlr4.Runtime.Misc;
	using Antlr4.Runtime.Tree;
	using System.Collections.Generic;
	using DFA = Antlr4.Runtime.Dfa.DFA;

	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
	[System.CLSCompliant(false)]
	public partial class SummariesParser : Parser
	{
		public const int
			T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
			T__9 = 10, T__10 = 11, SEPARATION = 12, NULL = 13, FRESH = 14, ISIN = 15, SINGLE = 16,
			MANY = 17, ANY = 18, RECEIVER = 19, PARAMS = 20, GLOBALS = 21, RETURNVALUE = 22, REACHABLEOBJ = 23,
			UNTILTYPE = 24, OFTYPE = 25, OFKIND = 26, NUMBER = 27, NEWLINE = 28, WORD = 29;
		public const int
			RULE_s = 0, RULE_rv = 1, RULE_ro = 2, RULE_r = 3, RULE_w = 4, RULE_cn = 5,
			RULE_null = 6, RULE_fresh = 7, RULE_isIn = 8, RULE_singleMany = 9, RULE_single = 10,
			RULE_many = 11, RULE_types = 12, RULE_type = 13, RULE_kinds = 14, RULE_kind = 15,
			RULE_words = 16, RULE_elementType = 17, RULE_parametricType = 18, RULE_field = 19,
			RULE_anyField = 20, RULE_mc = 21, RULE_c = 22, RULE_metf = 23, RULE_etf = 24,
			RULE_fa = 25, RULE_met = 26, RULE_et = 27, RULE_bf = 28, RULE_b = 29,
			RULE_f = 30, RULE_filter = 31, RULE_filterT = 32, RULE_filterUT = 33,
			RULE_filterOT = 34, RULE_filterOK = 35, RULE_number = 36;
		public static readonly string[] ruleNames = {
		"s", "rv", "ro", "r", "w", "cn", "null", "fresh", "isIn", "singleMany",
		"single", "many", "types", "type", "kinds", "kind", "words", "elementType",
		"parametricType", "field", "anyField", "mc", "c", "metf", "etf", "fa",
		"met", "et", "bf", "b", "f", "filter", "filterT", "filterUT", "filterOT",
		"filterOK", "number"
	};

		private static readonly string[] _LiteralNames = {
		null, "'{}'", "'{'", "'}'", "'{|'", "'|'", "';'", "', '", "'@'", "'['",
		"']'", "'*'", "'.'", "'Null'", "'Fresh'", "'IsIn'", "'Single'", "'Many'",
		"'?'", "'R'", "'P'", "'G'", "'RV'", "'RO'", "'UntilType'", "'OfType'",
		"'OfKind'"
	};
		private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null,
		"SEPARATION", "NULL", "FRESH", "ISIN", "SINGLE", "MANY", "ANY", "RECEIVER",
		"PARAMS", "GLOBALS", "RETURNVALUE", "REACHABLEOBJ", "UNTILTYPE", "OFTYPE",
		"OFKIND", "NUMBER", "NEWLINE", "WORD"
	};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[System.Obsolete("Use Vocabulary instead.")]
		public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

		private static string[] GenerateTokenNames(IVocabulary vocabulary, int length)
		{
			string[] tokenNames = new string[length];
			for (int i = 0; i < tokenNames.Length; i++)
			{
				tokenNames[i] = vocabulary.GetLiteralName(i);
				if (tokenNames[i] == null)
				{
					tokenNames[i] = vocabulary.GetSymbolicName(i);
				}

				if (tokenNames[i] == null)
				{
					tokenNames[i] = "<INVALID>";
				}
			}

			return tokenNames;
		}

		[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
		public override string[] TokenNames
		{
			get
			{
				return tokenNames;
			}
		}

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "Summaries.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return _serializedATN; } }

		public SummariesParser(ITokenStream input)
			: base(input)
		{
			_interp = new ParserATNSimulator(this, _ATN);
		}
		public partial class SContext : ParserRuleContext
		{
			public RvContext rv()
			{
				return GetRuleContext<RvContext>(0);
			}
			public ITerminalNode[] SEPARATION() { return GetTokens(SummariesParser.SEPARATION); }
			public ITerminalNode SEPARATION(int i)
			{
				return GetToken(SummariesParser.SEPARATION, i);
			}
			public RoContext ro()
			{
				return GetRuleContext<RoContext>(0);
			}
			public RContext r()
			{
				return GetRuleContext<RContext>(0);
			}
			public WContext w()
			{
				return GetRuleContext<WContext>(0);
			}
			public CnContext cn()
			{
				return GetRuleContext<CnContext>(0);
			}
			public ITerminalNode Eof() { return GetToken(SummariesParser.Eof, 0); }
			public SContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_s; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterS(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitS(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitS(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public SContext s()
		{
			SContext _localctx = new SContext(_ctx, State);
			EnterRule(_localctx, 0, RULE_s);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 74; rv();
					State = 75; Match(SEPARATION);
					State = 76; ro();
					State = 77; Match(SEPARATION);
					State = 78; r();
					State = 79; Match(SEPARATION);
					State = 80; w();
					State = 81; Match(SEPARATION);
					State = 82; cn();
					State = 84;
					_errHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(_input, 0, _ctx))
					{
						case 1:
							{
								State = 83; Match(Eof);
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class RvContext : ParserRuleContext
		{
			public NullContext @null()
			{
				return GetRuleContext<NullContext>(0);
			}
			public FreshContext fresh()
			{
				return GetRuleContext<FreshContext>(0);
			}
			public IsInContext isIn()
			{
				return GetRuleContext<IsInContext>(0);
			}
			public RvContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_rv; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterRv(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitRv(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitRv(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public RvContext rv()
		{
			RvContext _localctx = new RvContext(_ctx, State);
			EnterRule(_localctx, 2, RULE_rv);
			try
			{
				State = 89;
				_errHandler.Sync(this);
				switch (_input.La(1))
				{
					case NULL:
						EnterOuterAlt(_localctx, 1);
						{
							State = 86; @null();
						}
						break;
					case FRESH:
						EnterOuterAlt(_localctx, 2);
						{
							State = 87; fresh();
						}
						break;
					case ISIN:
						EnterOuterAlt(_localctx, 3);
						{
							State = 88; isIn();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class RoContext : ParserRuleContext
		{
			public SingleManyContext singleMany()
			{
				return GetRuleContext<SingleManyContext>(0);
			}
			public RoContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_ro; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterRo(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitRo(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitRo(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public RoContext ro()
		{
			RoContext _localctx = new RoContext(_ctx, State);
			EnterRule(_localctx, 4, RULE_ro);
			try
			{
				State = 96;
				_errHandler.Sync(this);
				switch (_input.La(1))
				{
					case T__0:
						EnterOuterAlt(_localctx, 1);
						{
							State = 91; Match(T__0);
						}
						break;
					case T__1:
						EnterOuterAlt(_localctx, 2);
						{
							State = 92; Match(T__1);
							State = 93; singleMany();
							State = 94; Match(T__2);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class RContext : ParserRuleContext
		{
			public MetfContext metf()
			{
				return GetRuleContext<MetfContext>(0);
			}
			public RContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_r; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterR(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitR(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitR(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public RContext r()
		{
			RContext _localctx = new RContext(_ctx, State);
			EnterRule(_localctx, 6, RULE_r);
			try
			{
				State = 103;
				_errHandler.Sync(this);
				switch (_input.La(1))
				{
					case T__0:
						EnterOuterAlt(_localctx, 1);
						{
							State = 98; Match(T__0);
						}
						break;
					case T__1:
						EnterOuterAlt(_localctx, 2);
						{
							State = 99; Match(T__1);
							State = 100; metf();
							State = 101; Match(T__2);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class WContext : ParserRuleContext
		{
			public MetfContext metf()
			{
				return GetRuleContext<MetfContext>(0);
			}
			public WContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_w; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterW(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitW(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitW(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public WContext w()
		{
			WContext _localctx = new WContext(_ctx, State);
			EnterRule(_localctx, 8, RULE_w);
			try
			{
				State = 110;
				_errHandler.Sync(this);
				switch (_input.La(1))
				{
					case T__0:
						EnterOuterAlt(_localctx, 1);
						{
							State = 105; Match(T__0);
						}
						break;
					case T__1:
						EnterOuterAlt(_localctx, 2);
						{
							State = 106; Match(T__1);
							State = 107; metf();
							State = 108; Match(T__2);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class CnContext : ParserRuleContext
		{
			public McContext mc()
			{
				return GetRuleContext<McContext>(0);
			}
			public CnContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_cn; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterCn(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitCn(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitCn(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public CnContext cn()
		{
			CnContext _localctx = new CnContext(_ctx, State);
			EnterRule(_localctx, 10, RULE_cn);
			try
			{
				State = 117;
				_errHandler.Sync(this);
				switch (_input.La(1))
				{
					case T__0:
						EnterOuterAlt(_localctx, 1);
						{
							State = 112; Match(T__0);
						}
						break;
					case T__1:
						EnterOuterAlt(_localctx, 2);
						{
							State = 113; Match(T__1);
							State = 114; mc();
							State = 115; Match(T__2);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class NullContext : ParserRuleContext
		{
			public ITerminalNode NULL() { return GetToken(SummariesParser.NULL, 0); }
			public NullContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_null; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterNull(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitNull(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitNull(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public NullContext @null()
		{
			NullContext _localctx = new NullContext(_ctx, State);
			EnterRule(_localctx, 12, RULE_null);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 119; Match(NULL);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FreshContext : ParserRuleContext
		{
			public ITerminalNode FRESH() { return GetToken(SummariesParser.FRESH, 0); }
			public TypesContext types()
			{
				return GetRuleContext<TypesContext>(0);
			}
			public KindContext kind()
			{
				return GetRuleContext<KindContext>(0);
			}
			public FreshContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fresh; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterFresh(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitFresh(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFresh(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FreshContext fresh()
		{
			FreshContext _localctx = new FreshContext(_ctx, State);
			EnterRule(_localctx, 14, RULE_fresh);
			try
			{
				State = 139;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 6, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 121; Match(FRESH);
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 122; Match(FRESH);
							State = 123; Match(T__1);
							State = 124; types();
							State = 125; Match(T__2);
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 127; Match(FRESH);
							State = 128; Match(T__3);
							State = 129; kind();
							State = 130; Match(T__2);
						}
						break;

					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 132; Match(FRESH);
							State = 133; Match(T__1);
							State = 134; types();
							State = 135; Match(T__4);
							State = 136; kind();
							State = 137; Match(T__2);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class IsInContext : ParserRuleContext
		{
			public ITerminalNode ISIN() { return GetToken(SummariesParser.ISIN, 0); }
			public MetContext met()
			{
				return GetRuleContext<MetContext>(0);
			}
			public IsInContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_isIn; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterIsIn(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitIsIn(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitIsIn(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public IsInContext isIn()
		{
			IsInContext _localctx = new IsInContext(_ctx, State);
			EnterRule(_localctx, 16, RULE_isIn);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 141; Match(ISIN);
					State = 142; Match(T__1);
					State = 143; met();
					State = 144; Match(T__2);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class SingleManyContext : ParserRuleContext
		{
			public SingleContext single()
			{
				return GetRuleContext<SingleContext>(0);
			}
			public ManyContext many()
			{
				return GetRuleContext<ManyContext>(0);
			}
			public SingleManyContext singleMany()
			{
				return GetRuleContext<SingleManyContext>(0);
			}
			public SingleManyContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_singleMany; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterSingleMany(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitSingleMany(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSingleMany(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public SingleManyContext singleMany()
		{
			SingleManyContext _localctx = new SingleManyContext(_ctx, State);
			EnterRule(_localctx, 18, RULE_singleMany);
			try
			{
				State = 156;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 7, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 146; single();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 147; many();
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 148; single();
							State = 149; Match(T__5);
							State = 150; singleMany();
						}
						break;

					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 152; many();
							State = 153; Match(T__5);
							State = 154; singleMany();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class SingleContext : ParserRuleContext
		{
			public ITerminalNode SINGLE() { return GetToken(SummariesParser.SINGLE, 0); }
			public TypesContext types()
			{
				return GetRuleContext<TypesContext>(0);
			}
			public KindContext kind()
			{
				return GetRuleContext<KindContext>(0);
			}
			public SingleContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_single; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterSingle(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitSingle(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSingle(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public SingleContext single()
		{
			SingleContext _localctx = new SingleContext(_ctx, State);
			EnterRule(_localctx, 20, RULE_single);
			try
			{
				State = 176;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 8, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 158; Match(SINGLE);
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 159; Match(SINGLE);
							State = 160; Match(T__1);
							State = 161; types();
							State = 162; Match(T__2);
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 164; Match(SINGLE);
							State = 165; Match(T__3);
							State = 166; kind();
							State = 167; Match(T__2);
						}
						break;

					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 169; Match(SINGLE);
							State = 170; Match(T__1);
							State = 171; types();
							State = 172; Match(T__4);
							State = 173; kind();
							State = 174; Match(T__2);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ManyContext : ParserRuleContext
		{
			public ITerminalNode MANY() { return GetToken(SummariesParser.MANY, 0); }
			public TypesContext types()
			{
				return GetRuleContext<TypesContext>(0);
			}
			public KindContext kind()
			{
				return GetRuleContext<KindContext>(0);
			}
			public ManyContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_many; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterMany(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitMany(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMany(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ManyContext many()
		{
			ManyContext _localctx = new ManyContext(_ctx, State);
			EnterRule(_localctx, 22, RULE_many);
			try
			{
				State = 196;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 9, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 178; Match(MANY);
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 179; Match(MANY);
							State = 180; Match(T__1);
							State = 181; types();
							State = 182; Match(T__2);
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 184; Match(MANY);
							State = 185; Match(T__3);
							State = 186; kind();
							State = 187; Match(T__2);
						}
						break;

					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 189; Match(MANY);
							State = 190; Match(T__1);
							State = 191; types();
							State = 192; Match(T__4);
							State = 193; kind();
							State = 194; Match(T__2);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypesContext : ParserRuleContext
		{
			public TypeContext type()
			{
				return GetRuleContext<TypeContext>(0);
			}
			public TypesContext types()
			{
				return GetRuleContext<TypesContext>(0);
			}
			public TypesContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_types; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterTypes(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitTypes(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypes(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypesContext types()
		{
			TypesContext _localctx = new TypesContext(_ctx, State);
			EnterRule(_localctx, 24, RULE_types);
			try
			{
				State = 203;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 10, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 198; type();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 199; type();
							State = 200; Match(T__6);
							State = 201; types();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeContext : ParserRuleContext
		{
			public WordsContext words()
			{
				return GetRuleContext<WordsContext>(0);
			}
			public ElementTypeContext elementType()
			{
				return GetRuleContext<ElementTypeContext>(0);
			}
			public ParametricTypeContext parametricType()
			{
				return GetRuleContext<ParametricTypeContext>(0);
			}
			public TypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_type; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterType(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitType(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitType(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeContext type()
		{
			TypeContext _localctx = new TypeContext(_ctx, State);
			EnterRule(_localctx, 26, RULE_type);
			try
			{
				State = 208;
				_errHandler.Sync(this);
				switch (_input.La(1))
				{
					case WORD:
						EnterOuterAlt(_localctx, 1);
						{
							State = 205; words(0);
						}
						break;
					case T__7:
						EnterOuterAlt(_localctx, 2);
						{
							State = 206; elementType();
						}
						break;
					case T__10:
						EnterOuterAlt(_localctx, 3);
						{
							State = 207; parametricType();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class KindsContext : ParserRuleContext
		{
			public KindContext kind()
			{
				return GetRuleContext<KindContext>(0);
			}
			public KindsContext kinds()
			{
				return GetRuleContext<KindsContext>(0);
			}
			public KindsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_kinds; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterKinds(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitKinds(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitKinds(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public KindsContext kinds()
		{
			KindsContext _localctx = new KindsContext(_ctx, State);
			EnterRule(_localctx, 28, RULE_kinds);
			try
			{
				State = 215;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 12, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 210; kind();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 211; kind();
							State = 212; Match(T__6);
							State = 213; kinds();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class KindContext : ParserRuleContext
		{
			public ITerminalNode WORD() { return GetToken(SummariesParser.WORD, 0); }
			public KindContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_kind; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterKind(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitKind(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitKind(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public KindContext kind()
		{
			KindContext _localctx = new KindContext(_ctx, State);
			EnterRule(_localctx, 30, RULE_kind);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 217; Match(WORD);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class WordsContext : ParserRuleContext
		{
			public ITerminalNode WORD() { return GetToken(SummariesParser.WORD, 0); }
			public WordsContext words()
			{
				return GetRuleContext<WordsContext>(0);
			}
			public WordsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_words; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterWords(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitWords(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitWords(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public WordsContext words()
		{
			return words(0);
		}

		private WordsContext words(int _p)
		{
			ParserRuleContext _parentctx = _ctx;
			int _parentState = State;
			WordsContext _localctx = new WordsContext(_ctx, _parentState);
			WordsContext _prevctx = _localctx;
			int _startState = 32;
			EnterRecursionRule(_localctx, 32, RULE_words, _p);
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					{
						State = 220; Match(WORD);
					}
					_ctx.stop = _input.Lt(-1);
					State = 227;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input, 13, _ctx);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
					{
						if (_alt == 1)
						{
							if (_parseListeners != null) TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								{
									_localctx = new WordsContext(_parentctx, _parentState);
									PushNewRecursionContext(_localctx, _startState, RULE_words);
									State = 222;
									if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
									State = 223; Match(SEPARATION);
									State = 224; Match(WORD);
								}
							}
						}
						State = 229;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input, 13, _ctx);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class ElementTypeContext : ParserRuleContext
		{
			public ITerminalNode RECEIVER() { return GetToken(SummariesParser.RECEIVER, 0); }
			public ITerminalNode PARAMS() { return GetToken(SummariesParser.PARAMS, 0); }
			public NumberContext number()
			{
				return GetRuleContext<NumberContext>(0);
			}
			public ITerminalNode RETURNVALUE() { return GetToken(SummariesParser.RETURNVALUE, 0); }
			public ElementTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_elementType; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterElementType(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitElementType(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitElementType(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ElementTypeContext elementType()
		{
			ElementTypeContext _localctx = new ElementTypeContext(_ctx, State);
			EnterRule(_localctx, 34, RULE_elementType);
			try
			{
				State = 242;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 14, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 230; Match(T__7);
							State = 231; Match(RECEIVER);
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 232; Match(T__7);
							State = 233; Match(PARAMS);
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 234; Match(T__7);
							State = 235; Match(PARAMS);
							State = 236; Match(T__8);
							State = 237; number();
							State = 238; Match(T__9);
						}
						break;

					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 240; Match(T__7);
							State = 241; Match(RETURNVALUE);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ParametricTypeContext : ParserRuleContext
		{
			public ITerminalNode WORD() { return GetToken(SummariesParser.WORD, 0); }
			public ParametricTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_parametricType; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterParametricType(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitParametricType(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitParametricType(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ParametricTypeContext parametricType()
		{
			ParametricTypeContext _localctx = new ParametricTypeContext(_ctx, State);
			EnterRule(_localctx, 36, RULE_parametricType);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 244; Match(T__10);
					State = 245; Match(WORD);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FieldContext : ParserRuleContext
		{
			public ITerminalNode WORD() { return GetToken(SummariesParser.WORD, 0); }
			public FieldContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_field; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterField(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitField(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitField(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FieldContext field()
		{
			FieldContext _localctx = new FieldContext(_ctx, State);
			EnterRule(_localctx, 38, RULE_field);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 247; Match(WORD);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class AnyFieldContext : ParserRuleContext
		{
			public ITerminalNode ANY() { return GetToken(SummariesParser.ANY, 0); }
			public AnyFieldContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_anyField; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterAnyField(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitAnyField(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitAnyField(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public AnyFieldContext anyField()
		{
			AnyFieldContext _localctx = new AnyFieldContext(_ctx, State);
			EnterRule(_localctx, 40, RULE_anyField);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 249; Match(ANY);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class McContext : ParserRuleContext
		{
			public CContext c()
			{
				return GetRuleContext<CContext>(0);
			}
			public McContext mc()
			{
				return GetRuleContext<McContext>(0);
			}
			public McContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_mc; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterMc(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitMc(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMc(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public McContext mc()
		{
			McContext _localctx = new McContext(_ctx, State);
			EnterRule(_localctx, 42, RULE_mc);
			try
			{
				State = 256;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 15, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 251; c();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 252; c();
							State = 253; Match(T__6);
							State = 254; mc();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class CContext : ParserRuleContext
		{
			public MetContext[] met()
			{
				return GetRuleContexts<MetContext>();
			}
			public MetContext met(int i)
			{
				return GetRuleContext<MetContext>(i);
			}
			public FaContext fa()
			{
				return GetRuleContext<FaContext>(0);
			}
			public CContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_c; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterC(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitC(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitC(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public CContext c()
		{
			CContext _localctx = new CContext(_ctx, State);
			EnterRule(_localctx, 44, RULE_c);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 258; Match(T__8);
					State = 259; met();
					State = 260; Match(T__6);
					State = 261; met();
					State = 262; Match(T__6);
					State = 263; fa();
					State = 264; Match(T__9);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class MetfContext : ParserRuleContext
		{
			public EtfContext etf()
			{
				return GetRuleContext<EtfContext>(0);
			}
			public MetfContext metf()
			{
				return GetRuleContext<MetfContext>(0);
			}
			public MetfContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_metf; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterMetf(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitMetf(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMetf(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public MetfContext metf()
		{
			MetfContext _localctx = new MetfContext(_ctx, State);
			EnterRule(_localctx, 46, RULE_metf);
			try
			{
				State = 271;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 16, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 266; etf();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 267; etf();
							State = 268; Match(T__5);
							State = 269; metf();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class EtfContext : ParserRuleContext
		{
			public BContext b()
			{
				return GetRuleContext<BContext>(0);
			}
			public EtContext et()
			{
				return GetRuleContext<EtContext>(0);
			}
			public FaContext fa()
			{
				return GetRuleContext<FaContext>(0);
			}
			public EtfContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_etf; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterEtf(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitEtf(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEtf(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public EtfContext etf()
		{
			EtfContext _localctx = new EtfContext(_ctx, State);
			EnterRule(_localctx, 48, RULE_etf);
			try
			{
				State = 278;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 17, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 273; b();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 274; et();
							State = 275; Match(SEPARATION);
							State = 276; fa();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FaContext : ParserRuleContext
		{
			public FieldContext field()
			{
				return GetRuleContext<FieldContext>(0);
			}
			public ITerminalNode ANY() { return GetToken(SummariesParser.ANY, 0); }
			public ITerminalNode WORD() { return GetToken(SummariesParser.WORD, 0); }
			public FaContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fa; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterFa(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitFa(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFa(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FaContext fa()
		{
			FaContext _localctx = new FaContext(_ctx, State);
			EnterRule(_localctx, 50, RULE_fa);
			try
			{
				State = 284;
				_errHandler.Sync(this);
				switch (_input.La(1))
				{
					case WORD:
						EnterOuterAlt(_localctx, 1);
						{
							State = 280; field();
						}
						break;
					case ANY:
						EnterOuterAlt(_localctx, 2);
						{
							State = 281; Match(ANY);
						}
						break;
					case T__7:
						EnterOuterAlt(_localctx, 3);
						{
							State = 282; Match(T__7);
							State = 283; Match(WORD);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class MetContext : ParserRuleContext
		{
			public EtContext et()
			{
				return GetRuleContext<EtContext>(0);
			}
			public MetContext met()
			{
				return GetRuleContext<MetContext>(0);
			}
			public MetContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_met; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterMet(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitMet(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMet(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public MetContext met()
		{
			MetContext _localctx = new MetContext(_ctx, State);
			EnterRule(_localctx, 52, RULE_met);
			try
			{
				State = 291;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 19, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 286; et();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 287; et();
							State = 288; Match(T__5);
							State = 289; met();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class EtContext : ParserRuleContext
		{
			public BfContext bf()
			{
				return GetRuleContext<BfContext>(0);
			}
			public FilterContext filter()
			{
				return GetRuleContext<FilterContext>(0);
			}
			public EtContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_et; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterEt(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitEt(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEt(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public EtContext et()
		{
			EtContext _localctx = new EtContext(_ctx, State);
			EnterRule(_localctx, 54, RULE_et);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 293; bf();
					State = 295;
					_errHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(_input, 20, _ctx))
					{
						case 1:
							{
								State = 294; filter();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class BfContext : ParserRuleContext
		{
			public BContext b()
			{
				return GetRuleContext<BContext>(0);
			}
			public FContext f()
			{
				return GetRuleContext<FContext>(0);
			}
			public BfContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_bf; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterBf(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitBf(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitBf(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public BfContext bf()
		{
			BfContext _localctx = new BfContext(_ctx, State);
			EnterRule(_localctx, 56, RULE_bf);
			try
			{
				State = 302;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 21, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 297; b();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 298; b();
							State = 299; Match(SEPARATION);
							State = 300; f();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class BContext : ParserRuleContext
		{
			public ITerminalNode RECEIVER() { return GetToken(SummariesParser.RECEIVER, 0); }
			public ITerminalNode PARAMS() { return GetToken(SummariesParser.PARAMS, 0); }
			public NumberContext number()
			{
				return GetRuleContext<NumberContext>(0);
			}
			public ITerminalNode GLOBALS() { return GetToken(SummariesParser.GLOBALS, 0); }
			public ITerminalNode RETURNVALUE() { return GetToken(SummariesParser.RETURNVALUE, 0); }
			public ITerminalNode REACHABLEOBJ() { return GetToken(SummariesParser.REACHABLEOBJ, 0); }
			public BContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_b; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterB(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitB(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitB(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public BContext b()
		{
			BContext _localctx = new BContext(_ctx, State);
			EnterRule(_localctx, 58, RULE_b);
			try
			{
				State = 319;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 22, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 304; Match(RECEIVER);
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 305; Match(PARAMS);
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 306; Match(PARAMS);
							State = 307; Match(T__8);
							State = 308; number();
							State = 309; Match(T__9);
						}
						break;

					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 311; Match(GLOBALS);
						}
						break;

					case 5:
						EnterOuterAlt(_localctx, 5);
						{
							State = 312; Match(RETURNVALUE);
						}
						break;

					case 6:
						EnterOuterAlt(_localctx, 6);
						{
							State = 313; Match(REACHABLEOBJ);
							State = 314; Match(T__8);
							State = 315; number();
							State = 316; Match(T__9);
						}
						break;

					case 7:
						EnterOuterAlt(_localctx, 7);
						{
							State = 318; Match(REACHABLEOBJ);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FContext : ParserRuleContext
		{
			public AnyFieldContext anyField()
			{
				return GetRuleContext<AnyFieldContext>(0);
			}
			public FContext f()
			{
				return GetRuleContext<FContext>(0);
			}
			public FieldContext field()
			{
				return GetRuleContext<FieldContext>(0);
			}
			public FContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_f; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterF(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitF(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitF(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FContext f()
		{
			FContext _localctx = new FContext(_ctx, State);
			EnterRule(_localctx, 60, RULE_f);
			try
			{
				State = 332;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 23, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 321; Match(T__10);
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 322; anyField();
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 323; anyField();
							State = 324; Match(SEPARATION);
							State = 325; f();
						}
						break;

					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 327; field();
						}
						break;

					case 5:
						EnterOuterAlt(_localctx, 5);
						{
							State = 328; field();
							State = 329; Match(SEPARATION);
							State = 330; f();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FilterContext : ParserRuleContext
		{
			public FilterTContext filterT()
			{
				return GetRuleContext<FilterTContext>(0);
			}
			public FilterOKContext filterOK()
			{
				return GetRuleContext<FilterOKContext>(0);
			}
			public FilterContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_filter; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterFilter(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitFilter(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFilter(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FilterContext filter()
		{
			FilterContext _localctx = new FilterContext(_ctx, State);
			EnterRule(_localctx, 62, RULE_filter);
			try
			{
				State = 339;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 24, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 334; filterT();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 335; filterOK();
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 336; filterT();
							State = 337; filterOK();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FilterTContext : ParserRuleContext
		{
			public FilterUTContext filterUT()
			{
				return GetRuleContext<FilterUTContext>(0);
			}
			public FilterOTContext filterOT()
			{
				return GetRuleContext<FilterOTContext>(0);
			}
			public FilterTContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_filterT; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterFilterT(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitFilterT(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFilterT(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FilterTContext filterT()
		{
			FilterTContext _localctx = new FilterTContext(_ctx, State);
			EnterRule(_localctx, 64, RULE_filterT);
			try
			{
				State = 346;
				_errHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 25, _ctx))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 341; filterUT();
						}
						break;

					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 342; filterOT();
						}
						break;

					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 343; filterUT();
							State = 344; filterOT();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FilterUTContext : ParserRuleContext
		{
			public ITerminalNode UNTILTYPE() { return GetToken(SummariesParser.UNTILTYPE, 0); }
			public TypesContext types()
			{
				return GetRuleContext<TypesContext>(0);
			}
			public FilterUTContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_filterUT; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterFilterUT(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitFilterUT(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFilterUT(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FilterUTContext filterUT()
		{
			FilterUTContext _localctx = new FilterUTContext(_ctx, State);
			EnterRule(_localctx, 66, RULE_filterUT);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 348; Match(SEPARATION);
					State = 349; Match(UNTILTYPE);
					State = 350; Match(T__1);
					State = 351; types();
					State = 352; Match(T__2);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FilterOTContext : ParserRuleContext
		{
			public ITerminalNode OFTYPE() { return GetToken(SummariesParser.OFTYPE, 0); }
			public TypesContext types()
			{
				return GetRuleContext<TypesContext>(0);
			}
			public FilterOTContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_filterOT; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterFilterOT(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitFilterOT(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFilterOT(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FilterOTContext filterOT()
		{
			FilterOTContext _localctx = new FilterOTContext(_ctx, State);
			EnterRule(_localctx, 68, RULE_filterOT);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 354; Match(SEPARATION);
					State = 355; Match(OFTYPE);
					State = 356; Match(T__1);
					State = 357; types();
					State = 358; Match(T__2);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FilterOKContext : ParserRuleContext
		{
			public ITerminalNode OFKIND() { return GetToken(SummariesParser.OFKIND, 0); }
			public KindsContext kinds()
			{
				return GetRuleContext<KindsContext>(0);
			}
			public FilterOKContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_filterOK; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterFilterOK(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitFilterOK(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFilterOK(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FilterOKContext filterOK()
		{
			FilterOKContext _localctx = new FilterOKContext(_ctx, State);
			EnterRule(_localctx, 70, RULE_filterOK);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 360; Match(SEPARATION);
					State = 361; Match(OFKIND);
					State = 362; Match(T__1);
					State = 363; kinds();
					State = 364; Match(T__2);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class NumberContext : ParserRuleContext
		{
			public ITerminalNode NUMBER() { return GetToken(SummariesParser.NUMBER, 0); }
			public NumberContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_number; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.EnterNumber(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ISummariesListener typedListener = listener as ISummariesListener;
				if (typedListener != null) typedListener.ExitNumber(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ISummariesVisitor<TResult> typedVisitor = visitor as ISummariesVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitNumber(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public NumberContext number()
		{
			NumberContext _localctx = new NumberContext(_ctx, State);
			EnterRule(_localctx, 72, RULE_number);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 366; Match(NUMBER);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				_errHandler.ReportError(this, re);
				_errHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
		{
			switch (ruleIndex)
			{
				case 16: return words_sempred((WordsContext)_localctx, predIndex);
			}
			return true;
		}
		private bool words_sempred(WordsContext _localctx, int predIndex)
		{
			switch (predIndex)
			{
				case 0: return Precpred(_ctx, 1);
			}
			return true;
		}

		public static readonly string _serializedATN =
			"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1F\x173\x4\x2" +
			"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4" +
			"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10" +
			"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15" +
			"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B" +
			"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!" +
			"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2" +
			"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2W\n\x2\x3\x3\x3\x3\x3\x3\x5\x3\\\n" +
			"\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x63\n\x4\x3\x5\x3\x5\x3\x5\x3" +
			"\x5\x3\x5\x5\x5j\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6q\n\x6\x3\a\x3" +
			"\a\x3\a\x3\a\x3\a\x5\ax\n\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3" +
			"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x8E\n\t" +
			"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v" +
			"\x3\v\x5\v\x9F\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3" +
			"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xB3\n\f\x3\r\x3\r\x3\r\x3\r" +
			"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r" +
			"\x5\r\xC7\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xCE\n\xE\x3\xF\x3\xF" +
			"\x3\xF\x5\xF\xD3\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xDA\n" +
			"\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xE4" +
			"\n\x12\f\x12\xE\x12\xE7\v\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13" +
			"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xF5\n\x13\x3\x14\x3" +
			"\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3" +
			"\x17\x5\x17\x103\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18" +
			"\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x112\n\x19\x3\x1A\x3" +
			"\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x119\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B" +
			"\x5\x1B\x11F\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x126\n\x1C" +
			"\x3\x1D\x3\x1D\x5\x1D\x12A\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5" +
			"\x1E\x131\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F" +
			"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x142\n\x1F\x3" +
			" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x14F\n \x3!\x3!\x3!\x3!" +
			"\x3!\x5!\x156\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x15D\n\"\x3#\x3#\x3#\x3" +
			"#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&" +
			"\x2\x2\x3\"\'\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14" +
			"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2" +
			"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46" +
			"\x2H\x2J\x2\x2\x2\x17E\x2L\x3\x2\x2\x2\x4[\x3\x2\x2\x2\x6\x62\x3\x2\x2" +
			"\x2\bi\x3\x2\x2\x2\np\x3\x2\x2\x2\fw\x3\x2\x2\x2\xEy\x3\x2\x2\x2\x10\x8D" +
			"\x3\x2\x2\x2\x12\x8F\x3\x2\x2\x2\x14\x9E\x3\x2\x2\x2\x16\xB2\x3\x2\x2" +
			"\x2\x18\xC6\x3\x2\x2\x2\x1A\xCD\x3\x2\x2\x2\x1C\xD2\x3\x2\x2\x2\x1E\xD9" +
			"\x3\x2\x2\x2 \xDB\x3\x2\x2\x2\"\xDD\x3\x2\x2\x2$\xF4\x3\x2\x2\x2&\xF6" +
			"\x3\x2\x2\x2(\xF9\x3\x2\x2\x2*\xFB\x3\x2\x2\x2,\x102\x3\x2\x2\x2.\x104" +
			"\x3\x2\x2\x2\x30\x111\x3\x2\x2\x2\x32\x118\x3\x2\x2\x2\x34\x11E\x3\x2" +
			"\x2\x2\x36\x125\x3\x2\x2\x2\x38\x127\x3\x2\x2\x2:\x130\x3\x2\x2\x2<\x141" +
			"\x3\x2\x2\x2>\x14E\x3\x2\x2\x2@\x155\x3\x2\x2\x2\x42\x15C\x3\x2\x2\x2" +
			"\x44\x15E\x3\x2\x2\x2\x46\x164\x3\x2\x2\x2H\x16A\x3\x2\x2\x2J\x170\x3" +
			"\x2\x2\x2LM\x5\x4\x3\x2MN\a\xE\x2\x2NO\x5\x6\x4\x2OP\a\xE\x2\x2PQ\x5\b" +
			"\x5\x2QR\a\xE\x2\x2RS\x5\n\x6\x2ST\a\xE\x2\x2TV\x5\f\a\x2UW\a\x2\x2\x3" +
			"VU\x3\x2\x2\x2VW\x3\x2\x2\x2W\x3\x3\x2\x2\x2X\\\x5\xE\b\x2Y\\\x5\x10\t" +
			"\x2Z\\\x5\x12\n\x2[X\x3\x2\x2\x2[Y\x3\x2\x2\x2[Z\x3\x2\x2\x2\\\x5\x3\x2" +
			"\x2\x2]\x63\a\x3\x2\x2^_\a\x4\x2\x2_`\x5\x14\v\x2`\x61\a\x5\x2\x2\x61" +
			"\x63\x3\x2\x2\x2\x62]\x3\x2\x2\x2\x62^\x3\x2\x2\x2\x63\a\x3\x2\x2\x2\x64" +
			"j\a\x3\x2\x2\x65\x66\a\x4\x2\x2\x66g\x5\x30\x19\x2gh\a\x5\x2\x2hj\x3\x2" +
			"\x2\x2i\x64\x3\x2\x2\x2i\x65\x3\x2\x2\x2j\t\x3\x2\x2\x2kq\a\x3\x2\x2l" +
			"m\a\x4\x2\x2mn\x5\x30\x19\x2no\a\x5\x2\x2oq\x3\x2\x2\x2pk\x3\x2\x2\x2" +
			"pl\x3\x2\x2\x2q\v\x3\x2\x2\x2rx\a\x3\x2\x2st\a\x4\x2\x2tu\x5,\x17\x2u" +
			"v\a\x5\x2\x2vx\x3\x2\x2\x2wr\x3\x2\x2\x2ws\x3\x2\x2\x2x\r\x3\x2\x2\x2" +
			"yz\a\xF\x2\x2z\xF\x3\x2\x2\x2{\x8E\a\x10\x2\x2|}\a\x10\x2\x2}~\a\x4\x2" +
			"\x2~\x7F\x5\x1A\xE\x2\x7F\x80\a\x5\x2\x2\x80\x8E\x3\x2\x2\x2\x81\x82\a" +
			"\x10\x2\x2\x82\x83\a\x6\x2\x2\x83\x84\x5 \x11\x2\x84\x85\a\x5\x2\x2\x85" +
			"\x8E\x3\x2\x2\x2\x86\x87\a\x10\x2\x2\x87\x88\a\x4\x2\x2\x88\x89\x5\x1A" +
			"\xE\x2\x89\x8A\a\a\x2\x2\x8A\x8B\x5 \x11\x2\x8B\x8C\a\x5\x2\x2\x8C\x8E" +
			"\x3\x2\x2\x2\x8D{\x3\x2\x2\x2\x8D|\x3\x2\x2\x2\x8D\x81\x3\x2\x2\x2\x8D" +
			"\x86\x3\x2\x2\x2\x8E\x11\x3\x2\x2\x2\x8F\x90\a\x11\x2\x2\x90\x91\a\x4" +
			"\x2\x2\x91\x92\x5\x36\x1C\x2\x92\x93\a\x5\x2\x2\x93\x13\x3\x2\x2\x2\x94" +
			"\x9F\x5\x16\f\x2\x95\x9F\x5\x18\r\x2\x96\x97\x5\x16\f\x2\x97\x98\a\b\x2" +
			"\x2\x98\x99\x5\x14\v\x2\x99\x9F\x3\x2\x2\x2\x9A\x9B\x5\x18\r\x2\x9B\x9C" +
			"\a\b\x2\x2\x9C\x9D\x5\x14\v\x2\x9D\x9F\x3\x2\x2\x2\x9E\x94\x3\x2\x2\x2" +
			"\x9E\x95\x3\x2\x2\x2\x9E\x96\x3\x2\x2\x2\x9E\x9A\x3\x2\x2\x2\x9F\x15\x3" +
			"\x2\x2\x2\xA0\xB3\a\x12\x2\x2\xA1\xA2\a\x12\x2\x2\xA2\xA3\a\x4\x2\x2\xA3" +
			"\xA4\x5\x1A\xE\x2\xA4\xA5\a\x5\x2\x2\xA5\xB3\x3\x2\x2\x2\xA6\xA7\a\x12" +
			"\x2\x2\xA7\xA8\a\x6\x2\x2\xA8\xA9\x5 \x11\x2\xA9\xAA\a\x5\x2\x2\xAA\xB3" +
			"\x3\x2\x2\x2\xAB\xAC\a\x12\x2\x2\xAC\xAD\a\x4\x2\x2\xAD\xAE\x5\x1A\xE" +
			"\x2\xAE\xAF\a\a\x2\x2\xAF\xB0\x5 \x11\x2\xB0\xB1\a\x5\x2\x2\xB1\xB3\x3" +
			"\x2\x2\x2\xB2\xA0\x3\x2\x2\x2\xB2\xA1\x3\x2\x2\x2\xB2\xA6\x3\x2\x2\x2" +
			"\xB2\xAB\x3\x2\x2\x2\xB3\x17\x3\x2\x2\x2\xB4\xC7\a\x13\x2\x2\xB5\xB6\a" +
			"\x13\x2\x2\xB6\xB7\a\x4\x2\x2\xB7\xB8\x5\x1A\xE\x2\xB8\xB9\a\x5\x2\x2" +
			"\xB9\xC7\x3\x2\x2\x2\xBA\xBB\a\x13\x2\x2\xBB\xBC\a\x6\x2\x2\xBC\xBD\x5" +
			" \x11\x2\xBD\xBE\a\x5\x2\x2\xBE\xC7\x3\x2\x2\x2\xBF\xC0\a\x13\x2\x2\xC0" +
			"\xC1\a\x4\x2\x2\xC1\xC2\x5\x1A\xE\x2\xC2\xC3\a\a\x2\x2\xC3\xC4\x5 \x11" +
			"\x2\xC4\xC5\a\x5\x2\x2\xC5\xC7\x3\x2\x2\x2\xC6\xB4\x3\x2\x2\x2\xC6\xB5" +
			"\x3\x2\x2\x2\xC6\xBA\x3\x2\x2\x2\xC6\xBF\x3\x2\x2\x2\xC7\x19\x3\x2\x2" +
			"\x2\xC8\xCE\x5\x1C\xF\x2\xC9\xCA\x5\x1C\xF\x2\xCA\xCB\a\t\x2\x2\xCB\xCC" +
			"\x5\x1A\xE\x2\xCC\xCE\x3\x2\x2\x2\xCD\xC8\x3\x2\x2\x2\xCD\xC9\x3\x2\x2" +
			"\x2\xCE\x1B\x3\x2\x2\x2\xCF\xD3\x5\"\x12\x2\xD0\xD3\x5$\x13\x2\xD1\xD3" +
			"\x5&\x14\x2\xD2\xCF\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD1\x3\x2\x2\x2" +
			"\xD3\x1D\x3\x2\x2\x2\xD4\xDA\x5 \x11\x2\xD5\xD6\x5 \x11\x2\xD6\xD7\a\t" +
			"\x2\x2\xD7\xD8\x5\x1E\x10\x2\xD8\xDA\x3\x2\x2\x2\xD9\xD4\x3\x2\x2\x2\xD9" +
			"\xD5\x3\x2\x2\x2\xDA\x1F\x3\x2\x2\x2\xDB\xDC\a\x1F\x2\x2\xDC!\x3\x2\x2" +
			"\x2\xDD\xDE\b\x12\x1\x2\xDE\xDF\a\x1F\x2\x2\xDF\xE5\x3\x2\x2\x2\xE0\xE1" +
			"\f\x3\x2\x2\xE1\xE2\a\xE\x2\x2\xE2\xE4\a\x1F\x2\x2\xE3\xE0\x3\x2\x2\x2" +
			"\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6#\x3\x2" +
			"\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xE9\a\n\x2\x2\xE9\xF5\a\x15\x2\x2\xEA\xEB" +
			"\a\n\x2\x2\xEB\xF5\a\x16\x2\x2\xEC\xED\a\n\x2\x2\xED\xEE\a\x16\x2\x2\xEE" +
			"\xEF\a\v\x2\x2\xEF\xF0\x5J&\x2\xF0\xF1\a\f\x2\x2\xF1\xF5\x3\x2\x2\x2\xF2" +
			"\xF3\a\n\x2\x2\xF3\xF5\a\x18\x2\x2\xF4\xE8\x3\x2\x2\x2\xF4\xEA\x3\x2\x2" +
			"\x2\xF4\xEC\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5%\x3\x2\x2\x2\xF6\xF7\a" +
			"\r\x2\x2\xF7\xF8\a\x1F\x2\x2\xF8\'\x3\x2\x2\x2\xF9\xFA\a\x1F\x2\x2\xFA" +
			")\x3\x2\x2\x2\xFB\xFC\a\x14\x2\x2\xFC+\x3\x2\x2\x2\xFD\x103\x5.\x18\x2" +
			"\xFE\xFF\x5.\x18\x2\xFF\x100\a\t\x2\x2\x100\x101\x5,\x17\x2\x101\x103" +
			"\x3\x2\x2\x2\x102\xFD\x3\x2\x2\x2\x102\xFE\x3\x2\x2\x2\x103-\x3\x2\x2" +
			"\x2\x104\x105\a\v\x2\x2\x105\x106\x5\x36\x1C\x2\x106\x107\a\t\x2\x2\x107" +
			"\x108\x5\x36\x1C\x2\x108\x109\a\t\x2\x2\x109\x10A\x5\x34\x1B\x2\x10A\x10B" +
			"\a\f\x2\x2\x10B/\x3\x2\x2\x2\x10C\x112\x5\x32\x1A\x2\x10D\x10E\x5\x32" +
			"\x1A\x2\x10E\x10F\a\b\x2\x2\x10F\x110\x5\x30\x19\x2\x110\x112\x3\x2\x2" +
			"\x2\x111\x10C\x3\x2\x2\x2\x111\x10D\x3\x2\x2\x2\x112\x31\x3\x2\x2\x2\x113" +
			"\x119\x5<\x1F\x2\x114\x115\x5\x38\x1D\x2\x115\x116\a\xE\x2\x2\x116\x117" +
			"\x5\x34\x1B\x2\x117\x119\x3\x2\x2\x2\x118\x113\x3\x2\x2\x2\x118\x114\x3" +
			"\x2\x2\x2\x119\x33\x3\x2\x2\x2\x11A\x11F\x5(\x15\x2\x11B\x11F\a\x14\x2" +
			"\x2\x11C\x11D\a\n\x2\x2\x11D\x11F\a\x1F\x2\x2\x11E\x11A\x3\x2\x2\x2\x11E" +
			"\x11B\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2\x11F\x35\x3\x2\x2\x2\x120\x126" +
			"\x5\x38\x1D\x2\x121\x122\x5\x38\x1D\x2\x122\x123\a\b\x2\x2\x123\x124\x5" +
			"\x36\x1C\x2\x124\x126\x3\x2\x2\x2\x125\x120\x3\x2\x2\x2\x125\x121\x3\x2" +
			"\x2\x2\x126\x37\x3\x2\x2\x2\x127\x129\x5:\x1E\x2\x128\x12A\x5@!\x2\x129" +
			"\x128\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x39\x3\x2\x2\x2\x12B\x131" +
			"\x5<\x1F\x2\x12C\x12D\x5<\x1F\x2\x12D\x12E\a\xE\x2\x2\x12E\x12F\x5> \x2" +
			"\x12F\x131\x3\x2\x2\x2\x130\x12B\x3\x2\x2\x2\x130\x12C\x3\x2\x2\x2\x131" +
			";\x3\x2\x2\x2\x132\x142\a\x15\x2\x2\x133\x142\a\x16\x2\x2\x134\x135\a" +
			"\x16\x2\x2\x135\x136\a\v\x2\x2\x136\x137\x5J&\x2\x137\x138\a\f\x2\x2\x138" +
			"\x142\x3\x2\x2\x2\x139\x142\a\x17\x2\x2\x13A\x142\a\x18\x2\x2\x13B\x13C" +
			"\a\x19\x2\x2\x13C\x13D\a\v\x2\x2\x13D\x13E\x5J&\x2\x13E\x13F\a\f\x2\x2" +
			"\x13F\x142\x3\x2\x2\x2\x140\x142\a\x19\x2\x2\x141\x132\x3\x2\x2\x2\x141" +
			"\x133\x3\x2\x2\x2\x141\x134\x3\x2\x2\x2\x141\x139\x3\x2\x2\x2\x141\x13A" +
			"\x3\x2\x2\x2\x141\x13B\x3\x2\x2\x2\x141\x140\x3\x2\x2\x2\x142=\x3\x2\x2" +
			"\x2\x143\x14F\a\r\x2\x2\x144\x14F\x5*\x16\x2\x145\x146\x5*\x16\x2\x146" +
			"\x147\a\xE\x2\x2\x147\x148\x5> \x2\x148\x14F\x3\x2\x2\x2\x149\x14F\x5" +
			"(\x15\x2\x14A\x14B\x5(\x15\x2\x14B\x14C\a\xE\x2\x2\x14C\x14D\x5> \x2\x14D" +
			"\x14F\x3\x2\x2\x2\x14E\x143\x3\x2\x2\x2\x14E\x144\x3\x2\x2\x2\x14E\x145" +
			"\x3\x2\x2\x2\x14E\x149\x3\x2\x2\x2\x14E\x14A\x3\x2\x2\x2\x14F?\x3\x2\x2" +
			"\x2\x150\x156\x5\x42\"\x2\x151\x156\x5H%\x2\x152\x153\x5\x42\"\x2\x153" +
			"\x154\x5H%\x2\x154\x156\x3\x2\x2\x2\x155\x150\x3\x2\x2\x2\x155\x151\x3" +
			"\x2\x2\x2\x155\x152\x3\x2\x2\x2\x156\x41\x3\x2\x2\x2\x157\x15D\x5\x44" +
			"#\x2\x158\x15D\x5\x46$\x2\x159\x15A\x5\x44#\x2\x15A\x15B\x5\x46$\x2\x15B" +
			"\x15D\x3\x2\x2\x2\x15C\x157\x3\x2\x2\x2\x15C\x158\x3\x2\x2\x2\x15C\x159" +
			"\x3\x2\x2\x2\x15D\x43\x3\x2\x2\x2\x15E\x15F\a\xE\x2\x2\x15F\x160\a\x1A" +
			"\x2\x2\x160\x161\a\x4\x2\x2\x161\x162\x5\x1A\xE\x2\x162\x163\a\x5\x2\x2" +
			"\x163\x45\x3\x2\x2\x2\x164\x165\a\xE\x2\x2\x165\x166\a\x1B\x2\x2\x166" +
			"\x167\a\x4\x2\x2\x167\x168\x5\x1A\xE\x2\x168\x169\a\x5\x2\x2\x169G\x3" +
			"\x2\x2\x2\x16A\x16B\a\xE\x2\x2\x16B\x16C\a\x1C\x2\x2\x16C\x16D\a\x4\x2" +
			"\x2\x16D\x16E\x5\x1E\x10\x2\x16E\x16F\a\x5\x2\x2\x16FI\x3\x2\x2\x2\x170" +
			"\x171\a\x1D\x2\x2\x171K\x3\x2\x2\x2\x1CV[\x62ipw\x8D\x9E\xB2\xC6\xCD\xD2" +
			"\xD9\xE5\xF4\x102\x111\x118\x11E\x125\x129\x130\x141\x14E\x155\x15C";
		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
	}
} // namespace DynAbs.Summaries
